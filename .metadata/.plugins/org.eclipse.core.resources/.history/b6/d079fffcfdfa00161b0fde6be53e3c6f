/*Social network connectivity. Given a social network containing n members and a log file containing m timestamps at which times pairs of members formed friendships, 
 * design an algorithm to determine the earliest time at which all members are connected (i.e., every member is a friend of a friend of a friend ... of a friend). 
 * Assume that the log file is sorted by timestamp and that friendship is an equivalence relation. The running time of your algorithm should be mlogn or better and use 
 * extra space proportional to n.

Note: these interview questions are ungraded and purely for your own enrichment. To get a hint, submit a solution.*/
public class SocialNetworkConnectivity
{

			public static void main(String[] args) 
			{
						int numberOfMembers = 8 ;
						Connectivity connectivity = new Connectivity(numberOfMembers);

						connectivity.Union(0, 2);
						connectivity.Union(1, 2);
						connectivity.Union(4, 7);
					    connectivity.Union(6, 1);
						connectivity.Union(3, 5);
						connectivity.Union(1, 5);
						if(connectivity.IsConnect(3, 2) == true)
						{
								System.out.println(" \n connected");
						}
						else
						{
								System.out.println(" \n not connected");
						}
			}

}
